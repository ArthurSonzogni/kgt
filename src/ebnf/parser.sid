/* $Id$ */

/*
 * Extended Backus-Naur Form Parser
 * As defined by ISO/IEC 14977:1996(E)
 *
 * TODO: postfix * (esp for groups, versus individual terms)
 * TODO: - subtraction thingies
 * TODO: names with spaces (<concaternate-name>(list-of-names))
 * TODO: multiplicative 3 * term stuff
 */

%types%

	string;
	number;

	ast_production;
	ast_term;
	ast_alt;

%terminals%

	!ERROR;
	!UNRECOGNISED;

	EQUALS;
	ALT;
	SEP;
	!EXCEPT;

	STAR;
	CAT;
	!OPT;

	START-GROUP; END-GROUP;
	START-OPT;   END-OPT;
	START-STAR;  END-STAR;

	EMPTY;
	NAME:    () -> (:string);
	LITERAL: () -> (:string);
	NUMBER:  () -> (:number);

%productions%

	<make-empty-term>: () -> (:ast_term);
	<make-literal-term>: (:string) -> (:ast_term);
	<make-production-term>: (:string) -> (:ast_term);
	<make-alt>: (:ast_term) -> (:ast_alt);
	<make-production>: (:string, :ast_alt) -> (:ast_production);
	<make-empty-production>: () -> (:ast_production);

	<make-star-group>: (:ast_alt) -> (:ast_term);
	<make-opt-group>: (:ast_alt) -> (:ast_term);
	<make-alt-group>: (:ast_alt) -> (:ast_term);

	<set-repeat>: (:ast_term, :number) -> ();

	<add-term-to-list>: (:ast_term, :ast_term) -> ();
	<add-alt-to-list>: (:ast_alt, :ast_alt) -> ();
	<add-production-to-list>: (:ast_production, :ast_production) -> ();

	<err-expected-alt>;
	<err-expected-sep>;
	<err-expected-equals>;
	<err-unhandled>;

	list-of-terms: () -> (:ast_term);
	list-of-alts: () -> (:ast_alt);


	term: () -> (t :ast_term) = {
		EMPTY;
		t = <make-empty-term>;
	||
		l = LITERAL;
		t = <make-literal-term>(l);
	||
		n = NAME;
		t = <make-production-term>(n);
	};

	factor: () -> (t :ast_term) = {
		t = term;
	||
		START-STAR;
		a = list-of-alts;
		END-STAR;

		t = <make-star-group>(a);
	||
		START-OPT;
		a = list-of-alts;
		END-OPT;

		t = <make-opt-group>(a);
	||
		START-GROUP;
		a = list-of-alts;
		END-GROUP;

		t = <make-alt-group>(a);
	};

	repeatable-factor: () -> (t :ast_term) = {
		t = factor;
	||
		n = NUMBER;
		STAR;
		t = factor;
		<set-repeat>(t, n);
	};

	list-of-terms: () -> (l :ast_term) = {
		l = repeatable-factor;
	||
		l = repeatable-factor;
		CAT;
		t = list-of-terms;
		<add-term-to-list>(t, l);
	};

	list-of-alts: () -> (l :ast_alt) = {
		t = list-of-terms;
		l = <make-alt>(t);
	||
		t = list-of-terms;

		{
			ALT;
		##
			<err-expected-alt>;
		};

		a = list-of-alts;
		l = <make-alt>(t);
		<add-alt-to-list>(a, l);
	};

	production: () -> (p :ast_production) = {
		n = NAME;

		{
			EQUALS;
		##
			<err-expected-equals>;
		};

		a = list-of-alts;
		p = <make-production>(n, a);

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	list-of-productions: () -> (l :ast_production) = {
		l = production;
	||
		l = production;
		p = list-of-productions();
		<add-production-to-list>(p, l);
	};

	ebnf-grammar: () -> (l :ast_production) = {
		l = list-of-productions;
	##
		l = <make-empty-production>;
		<err-unhandled>;
	};

%entry%

	ebnf-grammar;

