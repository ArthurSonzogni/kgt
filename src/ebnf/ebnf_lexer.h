
/*
 * Automatically generated by lexi version 2.0
 * Copyright terms for the input source also apply to this generated code.
 */

#ifndef LEXI_GENERATED_HEADER_ebnf__INCLUDED
#define LEXI_GENERATED_HEADER_ebnf__INCLUDED

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
#include <stdbool.h>
#endif



/*
 * This struct holds state for the lexer; its representation is
 * private, but present here for ease of allocation.
 */
struct ebnf_state {
	int (*zone)(struct ebnf_state *);

	/*
	 * Lexi's buffer is a simple stack.
	 */
	int buffer[2];
	int buffer_index;
};

/* Read a character */
int ebnf_readchar(struct ebnf_state *state);

/* Push a character to lexi's buffer */
void ebnf_push(struct ebnf_state *state, const int c);

/* Pop a character from lexi's buffer */
int ebnf_pop(struct ebnf_state *state);

/* Flush lexi's buffer */
void ebnf_flush(struct ebnf_state *state);

#ifndef LEXI_EOF
#define LEXI_EOF -1
#endif

enum ebnf_groups {
	ebnf_group_character_or_space = 0x2,
	ebnf_group_character = 0x4,
	ebnf_group_digit = 0x8,
	ebnf_group_letter = 0x10,
	ebnf_group_white = 0x20,
	ebnf_number_white = 0,
	ebnf_name_white = 0x1,
	ebnf_double_white = 0,
	ebnf_single_white = 0,
	ebnf_comment_white = 0
};

/* true if the given character is present in the given group */
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
bool ebnf_group(enum ebnf_groups group, int c);
#else
int ebnf_group(enum ebnf_groups group, int c);
#endif

/* Identify a token */
int ebnf_next(struct ebnf_state *state);

/* Initialise a ebnf_state structure */
void ebnf_init(struct ebnf_state *state);



#endif

