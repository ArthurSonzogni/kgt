/* $Id$ */

/*
 * Extended Backus-Naur Form Lexer
 * As defined by ISO/IEC 14977:1996(E)
 */

ACTION <io_push>: (c: CHARACTER) -> ();
ACTION <io_flush>;
ACTION <io_literal>: () -> (tok: TERMINAL);

ACTION <err_unexpected_eof>;
ACTION <err_unexpected_character>: (c: CHARACTER) -> ();
ACTION <err_invalid_sequence>: (c0: CHARACTER, c1: CHARACTER, c2: CHARACTER) -> ();


TOKEN "\e" -> $SEP;

/* 7.6: Gap-separator */
GROUP white = " \t\r\n\v\f";

/* Table 4: Invalid sequences of characters */
/* TODO: update for strings instead */
TOKEN "(*)" -> <err_invalid_sequence>(#0, #1, #2), $$;
TOKEN "(:)" -> <err_invalid_sequence>(#0, #1, #2), $$;
TOKEN "(/)" -> <err_invalid_sequence>(#0, #1, #2), $$;


ZONE comment: "(*" ... "*)" {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN DEFAULT -> $$;
}


ZONE single: "`" ... "`" -> $ = <io_literal> {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN DEFAULT -> <io_push>(#0), $$;
};

ZONE double: "\"" ... "\"" -> $ = <io_literal> {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN DEFAULT -> <io_push>(#0), $$;
};



/*
 * Table 1: Representation of terminal-charaters
 */
TOKEN "|" -> $ALT;

TOKEN "\[" -> $START-OPT;
TOKEN "]" -> $END-OPT;
TOKEN "{" -> $START-STAR;
TOKEN "}" -> $END-STAR;
TOKEN ";" -> $SEP;


/*
 * Table 2: Alternative representation of terminal-characters
 */
TOKEN "/" -> $ALT;
TOKEN "!" -> $ALT;
TOKEN "." -> $SEP;

TOKEN "(:" -> $START-STAR;	/* TODO rename to start-rep */
TOKEN ":)" -> $END-STAR;
TOKEN "(/" -> $START-OPT;
TOKEN "/)" -> $END-OPT;


/*
 * Tokens shared by both representations
 */
TOKEN "," -> $CAT;
TOKEN "=" -> $EQUALS;
TOKEN "(" -> $START-GROUP;
TOKEN ")" -> $END-GROUP;
TOKEN "-" -> $EXCEPT;
TOKEN "*" -> $STAR;
TOKEN "?" -> $OPT;

GROUP letter = {A-Z} + {a-z};
GROUP digit = {0-9};

GROUP character = "[letter][digit]" + "-_";
GROUP character_or_space = "[character]" + " ";
ZONE name: "[character]" -> <io_push>(#0), $$ [...) "[^character_or_space]" -> $NAME {
	/*
	 * Space is excluded from whitespace in EBNF names, to permit names with
	 * spaces. This includes trailing spaces, which are expected to be removed
	 * by the terminal-extraction action in the parser.
	 */
	GROUP white = "\t\r\n\v\f";	/* TODO "[white]" - " " when we have group exclusion */
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN "[character_or_space]" -> <io_push>(#0), $$;
	TOKEN DEFAULT -> <err_unexpected_character>(#0), $$;
};

ZONE number: "[digit]" -> <io_push>(#0), $$ [...) "[^digit]" -> $NUMBER {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN "[digit]" -> <io_push>(#0), $$;
	TOKEN DEFAULT -> <err_unexpected_character>(#0), $$;
};

TOKEN DEFAULT -> <err_unexpected_character>(#0), $$;

