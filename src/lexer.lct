/* $Id$ */

/*
 * Shared lexer actions.
 */

HEADERS = @{

	#include <assert.h>
	#include <stdio.h>
	#include <stdlib.h>

	#include "../io.h"
	#include "../main.h"
	#include "../tokens.h"
	#include "../xalloc.h"

	#include LEXI_HEADER

	/*
	 * Interfaces for the generated lexer.
	 */

	typedef enum tok ZTTERMINAL;


	FILE *io_fin;
	unsigned int io_line;

	char io_buffer[1024];

	size_t bufferindex;


	/*
	 * Lexi's interface to get a character from our input stream.
	 */
	static int
	lexi_getchar(struct bnf_state *state)
	{
		int c;

		assert(state != NULL);

		(void) state;

		c = getc(io_fin);
		if (c == EOF) {
			return EOF;
		}

		if (c == '\n') {
			io_line++;
		}

		return c;
	}

@} , @{

@};

TRAILERS = @{

@},@{

@};


/*
 * Push a character to the token buffer.
 */
ACTION io_push: (c: CHARACTER) -> () = @{
	io_push(@c);
@};

/*
 * Flush the token buffer.
 */
ACTION io_flush = @{
	io_flush();
@};

/*
 * Produce a literal token, or an empty token if the token buffer has no content.
 */
ACTION io_literal: () -> (tok: TERMINAL) = @{
	@tok = io_literal();
@};


/*
 * Error out on an unexpected EOF.
 */
ACTION err_unexpected_eof = @{
	xerror("unexpected EOF on line %d", io_line);
@};

/*
 * Error out on an unexpected character.
 */
ACTION err_unexpected_character: (c: CHARACTER) -> () = @{
	xerror("unexpected character \"%c\" on line %d", @c, io_line);
@};

/*
 * Error out on an invalid character sequence.
 */
/* TODO: rework for #* */
ACTION err_invalid_sequence: (c0: CHARACTER, c1: CHARACTER, c2: CHARACTER) -> () = @{
	xerror("invalid character sequence \"%c%c%c\" on line %d", @c0, @c1, @c2, io_line);
@};

