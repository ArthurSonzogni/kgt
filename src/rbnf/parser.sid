/*
 * Routing Backus-Naur Form (RBNF), per RFC 5511
 */

%types%

	char;
	string;
	count;

	ast_rule;
	ast_term;
	ast_alt;

%terminals%

	!ERROR;
	!UNRECOGNISED;
	EOF;

	EQUALS;
	ALT;
	SEP;
	REP;
	!EXCEPT;

	STARTGROUP; ENDGROUP;
	STARTOPT;   ENDOPT;
	!STARTSTAR; !ENDSTAR;

	!EMPTY;
	NAME;
	!LITERAL;

	!ESC:   () -> (:char);
	CHAR:   () -> (:char);
	!IDENT: () -> (:string);
	!COUNT: () -> (:count);

	!BINSTR:   () -> (:string);
	!OCTSTR:   () -> (:string);
	!DECSTR:   () -> (:string);
	!HEXSTR:   () -> (:string);

	!BINRANGE: () -> (:char, :char);
	!OCTRANGE: () -> (:char, :char);
	!DECRANGE: () -> (:char, :char);
	!HEXRANGE: () -> (:char, :char);

%productions%

	<pattern-char>:   (:char) -> ();
	<pattern-buffer>: ()      -> (:string);

	<rep-one>:          () -> (:count, :count);
	!<rep-one-or-more>: () -> (:count, :count);
	<rep-zero-or-more>: () -> (:count, :count);
	<rep-zero-or-one>:  () -> (:count, :count);

	<set-repeat>:  (:ast_term, :count, :count) -> ();
	!<mul-repeat>: (:ast_term, :count)         -> ();

	!<make-empty-term>:   ()             -> (:ast_term);
	<make-rule-term>:     (:string)      -> (:ast_term);
	!<make-literal-term>: (:string)      -> (:ast_term);
	!<make-token-term>:   (:string)      -> (:ast_term);
	<make-group-term>:    (:ast_alt)     -> (:ast_term);
	!<make-range-term>:   (:char, :char) -> (:ast_term);

	<make-alt>:        (:ast_term)         -> (:ast_alt);
	<make-rule>:       (:string, :ast_alt) -> (:ast_rule);
	<make-empty-rule>: ()                  -> (:ast_rule);

	<add-term-to-list>: (:ast_term, :ast_term) -> ();
	<add-alt-to-list>:  (:ast_alt, :ast_alt)   -> ();
	<add-rule-to-list>: (:ast_rule, :ast_rule) -> ();

	!<current-rules>: () -> (:ast_rule);
	!<find-rule>:     (:ast_rule, :string)  -> (:ast_rule);
	!<add-alts>:      (:ast_rule, :ast_alt) -> ();

	<err-syntax>;
	<err-expected-alt>;
	<err-expected-sep>;
	<err-expected-equals>;

	list-of-terms: () -> (:ast_term);
	list-of-alts:  () -> (:ast_alt);

	body: () -> () = {
		{
			c = CHAR;
		};
		<pattern-char>(c);
		body;
	||
		$;
	};

	term: () -> (t :ast_term) = {
		body;
		NAME;
		s = <pattern-buffer>;
		t = <make-rule-term>(s);
	};

	factor: () -> (t :ast_term) = {
		t = term;

		(min, max) = <rep-one>;
		<set-repeat>(t, min, max);
	||
		STARTOPT;
		a = list-of-alts;
		{
			(min, max) = <rep-zero-or-one>;
		||
			REP;
			(min, max) = <rep-zero-or-more>;
		};
		ENDOPT;

		t = <make-group-term>(a);

		<set-repeat>(t, min, max);
	||
		STARTGROUP;
		a = list-of-alts;
		ENDGROUP;

		t = <make-group-term>(a);

		(min, max) = <rep-one>;
		<set-repeat>(t, min, max);
	};

	list-of-terms: () -> (l :ast_term) = {
		l = factor;
	||
		l = factor;
		t = list-of-terms;
		<add-term-to-list>(t, l);
	};

	list-of-alts: () -> (l :ast_alt) = {
		t = list-of-terms;
		l = <make-alt>(t);
	||
		t = list-of-terms;

		{
			ALT;
		##
			<err-expected-alt>;
		};

		a = list-of-alts;
		l = <make-alt>(t);
		<add-alt-to-list>(a, l);
	};

	rule: () -> (r :ast_rule) = {
		body;
		NAME;
		s = <pattern-buffer>;

		{
			EQUALS;
		##
			<err-expected-equals>;
		};

		a = list-of-alts;
		r = <make-rule>(s, a);

		{
			EOF;
		||
			SEP;
		##
			<err-expected-sep>;
		};
	};

	list-of-rules: () -> (l :ast_rule) = {
		l = rule;
	||
		l = rule;
		r = list-of-rules();
		<add-rule-to-list>(r, l);
	};

	rbnf: () -> (l :ast_rule) = {
		l = list-of-rules;
	##
		l = <make-empty-rule>;
		<err-syntax>;
	};

%entry%

	rbnf;

