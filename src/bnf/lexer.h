
/*
 * Automatically generated by lexi version 2.0
 * Copyright terms for the input source also apply to this generated code.
 */

#ifndef LEXI_GENERATED_HEADER_bnf__INCLUDED
#define LEXI_GENERATED_HEADER_bnf__INCLUDED

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
#include <stdbool.h>
#endif



/*
 * This struct holds state for the lexer; its representation is
 * private, but present here for ease of allocation.
 */
struct bnf_state {
	int (*zone)(struct bnf_state *);

	/*
	 * Lexi's buffer is a simple stack.
	 */
	int buffer[2];
	int buffer_index;
};

/* Read a character */
int bnf_readchar(struct bnf_state *state);

/* Push a character to lexi's buffer */
void bnf_push(struct bnf_state *state, const int c);

/* Pop a character from lexi's buffer */
int bnf_pop(struct bnf_state *state);

/* Flush lexi's buffer */
void bnf_flush(struct bnf_state *state);

#ifndef LEXI_EOF
#define LEXI_EOF -1
#endif

enum bnf_groups {
	bnf_group_character = 0x1,
	bnf_group_white = 0x2,
	bnf_double_white = 0,
	bnf_single_white = 0,
	bnf_name_white = 0
};

/* true if the given character is present in the given group */
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
bool bnf_group(enum bnf_groups group, int c);
#else
int bnf_group(enum bnf_groups group, int c);
#endif

/* Identify a token */
int bnf_next(struct bnf_state *state);

/* Initialise a bnf_state structure */
void bnf_init(struct bnf_state *state);



#endif

