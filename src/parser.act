/* $Id$ */

/*
 * Shared parser actions
 */

%prefixes%

	terminal = TOK_;
	function = prod_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;

%maps%

	char   -> map_char;
	string -> map_string;
	count  -> map_count;

	ast_term -> map_term;
	ast_alt  -> map_alt;
	ast_rule -> map_rule;

%header% @{

	#include <assert.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdarg.h>
	#include <stdio.h>
	#include <ctype.h>

	#include "../ast.h"
	#include "../xalloc.h"

	#ifndef FORM
	#error FORM required
	#endif

	#define PASTE(a, b) a ## b
	#define CAT(a, b)   PASTE(a, b)

	#define LX_PREFIX CAT(lx_, FORM)

	#define LX_TOKEN  CAT(LX_PREFIX, _token)
	#define LX_STATE  CAT(LX_PREFIX, _lx)
	#define LX_NEXT   CAT(LX_PREFIX, _next)
	#define LX_INIT   CAT(LX_PREFIX, _init)

	#define FORM_INPUT CAT(FORM, _input)

	/* XXX: get rid of this; use same %entry% for all grammars */
	#define FORM_ENTRY CAT(prod_, FORM)

	#include "parser.h"
	#include "lexer.h"

	#include "io.h"

	typedef char         map_char;
	typedef const char * map_string;
	typedef unsigned int map_count;

	typedef struct ast_term * map_term;
	typedef struct ast_alt * map_alt;

	struct act_state {
		enum LX_TOKEN lex_tok;
		enum LX_TOKEN lex_tok_save;
	};

	struct lex_state {
		struct LX_STATE lx;
		struct lx_dynbuf buf;

		int (*f)(void *opaque);
		void *opaque;

		/* TODO: use lx's generated conveniences for the pattern buffer */
		char a[512];
		char *p;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   @$ERROR
	#define ADVANCE_LEXER    do { act_state->lex_tok = LX_NEXT(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	extern int allow_undefined;

	static void
	rtrim(char *s)
	{
		char *p = s + strlen(s) - 1;

		assert(strlen(s) > 0);

		while (p >= s && isspace((unsigned char) *p)) {
			*p-- = '\0';
		}
	}

	static void
	err(const struct lex_state *lex_state, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		va_start(ap, fmt);
		fprintf(stderr, "%u:%u: ",
			lex_state->lx.start.line, lex_state->lx.start.col);
		vfprintf(stderr, fmt, ap);
		fprintf(stderr, "\n");
		va_end(ap);
	}

	static void
	err_expected(const struct lex_state *lex_state, const char *token)
	{
		err(lex_state, "Syntax error: expected %s", token);
		exit(EXIT_FAILURE);
	}

@}, @{

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	typedef struct ast_rule * map_rule;

@};

%assignments%

%parameter-assignments%

%result-assignments%

%terminals%

	ESC: () -> (c :char) = @{
		assert(strlen(lex_state->buf.a) == 2);

		@c = lex_state->buf.a[0];
	@};

	CHAR: () -> (c :char) = @{
		assert(strlen(lex_state->buf.a) == 1);

		@c = lex_state->buf.a[0];
	@};

	IDENT: () -> (s :string) = @{
		/*
		 * This rtrim() is for EBNF, which would require n-token lookahead
		 * in order to lex just an ident (as ident may contain whitespace).
		 *
		 * I'm trimming here (for all grammars) because it's simpler than
		 * doing this for just EBNF specifically, and harmless to others.
		 */
		rtrim(lex_state->buf.a);

		@s = xstrdup(lex_state->buf.a);
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

	COUNT: () -> (n :count) = @{
		@n = strtoul(lex_state->buf.a, NULL, 10);
		/* TODO: range check */
	@};

	BINSTR: () -> (s :string) = @{
		@s = "";
		fprintf(stderr, "unimplemented\n");
	@};

	DECSTR: () -> (s :string) = @{
		@s = "";
		fprintf(stderr, "unimplemented\n");
	@};

	HEXSTR: () -> (s :string) = @{
		@s = "";
		fprintf(stderr, "unimplemented\n");
	@};

	BINRANGE: () -> (m :char, n :char) = @{
		@m = '\0';
		@n = '\0';
		fprintf(stderr, "unimplemented\n");
	@};

	DECRANGE: () -> (m :char, n :char) = @{
		@m = '\0';
		@n = '\0';
		fprintf(stderr, "unimplemented\n");
	@};

	HEXRANGE: () -> (m :char, n :char) = @{
		@m = '\0';
		@n = '\0';
		fprintf(stderr, "unimplemented\n");
	@};

%actions%

	/* TODO: big pile of error messages */

	<pattern-char>: (c :char) -> () = @{
		/* TODO */
		*lex_state->p++ = @c;
	@};

	<pattern-buffer>: () -> (s :string) = @{
		/* TODO */
		*lex_state->p++ = '\0';

		/*
		 * Note we strdup() here because the grammar permits adjacent patterns,
		 * and so the pattern buffer will be overwritten by the LL(1) one-token
		 * lookahead.
		 */
		@s = xstrdup(lex_state->a);
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}

		lex_state->p = lex_state->a;
	@};


	<rep-one>: () -> (min :count, max :count) = @{
		@min = 1;
		@max = 1;
	@};

	<rep-one-or-more>: () -> (min :count, max :count) = @{
		@min = 1;
		@max = 0;
	@};

	<rep-zero-or-more>: () -> (min :count, max :count) = @{
		@min = 0;
		@max = 0;
	@};

	<rep-zero-or-one>: () -> (min :count, max :count) = @{
		@min = 0;
		@max = 1;
	@};

	<set-repeat>: (t :ast_term, min :count, max :count) -> () = @{
		assert(@max >= @min || !@max);

		@t->min = @min;
		@t->max = @max;
	@};

	<mul-repeat>: (t :ast_term, n :count) -> () = @{
		assert(@n > 0);

		/*
		 * This multiplies a term's {min,max} pair as if the term were
		 * repeated multiple times inline. Possible situations here are:
		 *
		 *   {0,0} * n => {0,0}
		 *   {0,1} * n => {0,n}
		 *   {1,0} * n => {n,0}
		 *   {i,j} * n => {in,jn} where j >= i
		 *
		 * Note a max of 0 indicates no limit on the number of repetitions.
		 */

		@t->min *= @n;
		@t->max *= @n;
	@};


	<make-empty-term>: () -> (t :ast_term) = @{
		@t = ast_make_empty_term();
	@};

	<make-rule-term>: (n :string) -> (t :ast_term) = @{
		struct ast_rule *r;

		/*
		 * Regardless of whether a rule exists (yet) by this name, we make
		 * a placeholder rule just so that we have an ast_rule struct
		 * at which to point. This saves passing the grammar around, which
		 * keeps the rule-building productions simpler.
		 */
		r = ast_make_rule(@n, NULL);
		if (r == NULL) {
			perror("ast_make_rule");
			@!;
		}

		@t = ast_make_rule_term(r);
	@};

	<make-literal-term>: (l :string) -> (t :ast_term) = @{
		@t = ast_make_literal_term(@l);
	@};

	<make-token-term>: (n :string) -> (t :ast_term) = @{
		@t = ast_make_token_term(@n);
	@};

	<make-group-term>: (a :ast_alt) -> (t :ast_term) = @{
		@t = ast_make_group_term(@a);
	@};

	<make-range-term>: (m :char, n :char) -> (t :ast_term) = @{
		struct ast_alt *a;
		int i;

		a = NULL;

		for (i = @m; i <= @n; i++) {
			struct ast_alt *new;
			struct ast_term *t;

			t = ast_make_char_term(i);
			new = ast_make_alt(t);

			new->next = a;
			a = new;
		}

		@t = ast_make_group_term(a);
	@};


	<make-alt>: (t :ast_term) -> (a :ast_alt) = @{
		@a = ast_make_alt(@t);
	@};

	<make-rule>: (n :string, a :ast_alt) -> (r :ast_rule) = @{
		@r = ast_make_rule(@n, @a);
	@};

	<make-empty-rule>: () -> (r :ast_rule) = @{
		@r = NULL;
	@};


	<add-term-to-list>: (l :ast_term, t :ast_term) -> () = @{
		assert(@t->next == NULL);
		@t->next = @l;
	@};

	<add-alt-to-list>: (l :ast_alt, a :ast_alt) -> () = @{
		assert(@a->next == NULL);
		@a->next = @l;
	@};

	<add-rule-to-list>: (l :ast_rule, r :ast_rule) -> () = @{
		if (ast_find_rule(@l, @r->name)) {
			fprintf(stderr, "production rule <%s> already exists\n", @r->name);
			/* TODO: print location of this and previous definition */
			/* TODO: handle as warning; add rule anyway, and bail out at end */
			exit(EXIT_FAILURE);
		}

		assert(@r->next == NULL);
		@r->next = @l;
	@};


	<err-syntax> = @{
		err(lex_state, "Syntax error");
		exit(EXIT_FAILURE);
	@};

	<err-expected-alt> = @{
		err_expected(lex_state, "alternative separator");
	@};

	<err-expected-sep> = @{
		err_expected(lex_state, "production rule separator");
	@};

	<err-expected-equals> = @{
		err_expected(lex_state, "production rule assignment");
	@};

%trailer% @{

	static int
	lgetc(struct LX_STATE *lx)
	{
		const struct lex_state *lex_state;

		assert(lx != NULL);
		assert(lx->opaque != NULL);

		lex_state = lx->opaque;

		assert(lex_state->f != NULL);

		return lex_state->f(lex_state->opaque);
	}

	struct ast_rule *
	FORM_INPUT(int (*f)(void *opaque), void *opaque)
	{
		struct act_state  act_state_s;
		struct act_state *act_state;
		struct lex_state  lex_state_s;
		struct lex_state *lex_state;

		struct LX_STATE *lx;
		struct ast_rule *g;

		(void) rtrim; /* for dialects which don't use it */

		assert(f != NULL);

		g = NULL;

		lex_state    = &lex_state_s;
		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		LX_INIT(lx);

		lx->lgetc  = lgetc;
		lx->opaque = lex_state;

		lex_state->f       = f;
		lex_state->opaque  = opaque;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		/* XXX: unneccessary since we're lexing from a string */
		lx->buf   = &lex_state->buf;
		lx->push  = CAT(LX_PREFIX, _dynpush);
		lx->pop   = CAT(LX_PREFIX, _dynpop);
		lx->clear = CAT(LX_PREFIX, _dynclear);
		lx->free  = CAT(LX_PREFIX, _dynfree);

	/* XXX */
	lx->free = NULL;

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		ADVANCE_LEXER;
		FORM_ENTRY(lex_state, act_state, &g);

		/* TODO: handle error */

		/* substitute placeholder rules for the real thing */
		{
			const struct ast_rule *p;
			const struct ast_alt *q;
			struct ast_term *t;
			struct ast_rule *r;
			int ok;

			ok = 1;

			for (p = g; p != NULL; p = p->next) {
				for (q = p->alts; q != NULL; q = q->next) {
					for (t = q->terms; t != NULL; t = t->next) {
						if (t->type != TYPE_RULE) {
							continue;
						}

						r = ast_find_rule(g, t->u.rule->name);
						if (r != NULL) {
							free((char *) t->u.rule->name);
							ast_free_rule(t->u.rule);
							t->u.rule = r;
							continue;
						}

						if (!allow_undefined) {
							fprintf(stderr, "production rule <%s> not defined\n", t->u.rule->name);
							/* TODO: print location of this and previous definition */
							/* XXX: would leak the ast_rule here */

							ok = 0;
							continue;
						}

						{
							const char *token;

							token = t->u.rule->name;

							ast_free_rule(t->u.rule);

							t->type    = TYPE_TOKEN;
							t->u.token = token;
						}
					}
				}
			}

			if (!ok) {
				exit(EXIT_FAILURE);
			}
		}

		return g;
	}

@}, @{

@};

