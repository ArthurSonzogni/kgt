/* $Id$ */

/*
 * Wirth Syntax Notation Lexer
 */

ACTION <io_push>: (c: CHARACTER) -> ();
ACTION <io_flush>;
ACTION <io_literal>: () -> (tok: TERMINAL);

ACTION <err_unexpected_eof>;
ACTION <err_unexpected_character>: (c: CHARACTER) -> ();
ACTION <err_invalid_sequence>: (c0: CHARACTER, c1: CHARACTER, c2: CHARACTER) -> ();


TOKEN "=" -> $equals;
TOKEN "|" -> $alt;
TOKEN "\e" -> $sep;
TOKEN "." -> $sep;

ZONE literal: "\"" ... "\"" -> $ = <io_literal> {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN "\"\"" -> <io_push>(#0), $$;	/* TODO: I'd rather write this as <io_push>('\"') */
	TOKEN DEFAULT -> <io_push>(#0), $$;
};

GROUP character = {A-Z} + {a-z} + {0-9} + "-_";
/* TODO: end group is wrong? */
ZONE identifier: "[character]" -> <io_push>(#0), $$ [...) "[^character]" -> $name {
	GROUP white = "";
	TOKEN "\e" -> <err_unexpected_eof>, $$;
	TOKEN DEFAULT -> <io_push>(#0), $$;
}

TOKEN "{" -> $start-star;
TOKEN "}" -> $end-star;

TOKEN "\[" -> $start-opt;
TOKEN "]" -> $end-opt;

TOKEN "(" -> $start-group;
TOKEN ")" -> $end-group;

TOKEN DEFAULT -> <err_unexpected_character>(#0), $$;

