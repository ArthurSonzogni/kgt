/* $Id$ */

/*
 * Wirth Syntax Notation Parser
 */

%types%

	char;
	string;
	number;

	ast_rule;
	ast_term;
	ast_alt;

%terminals%

	!ERROR;
	!UNRECOGNISED;
	EOF;

	EQUALS;
	ALT;
	SEP;
	!EXCEPT;

	!STAR;
	!CAT;
	!OPT;

	STARTGROUP; ENDGROUP;
	STARTOPT;   ENDOPT;
	STARTSTAR;  ENDSTAR;

	EMPTY;
	!NAME;
	LITERAL;

	ESC:     () -> (:char);
	CHAR:    () -> (:char);
	IDENT:   () -> (:string);
	!NUMBER: () -> (:number);

%productions%

	<pattern-char>:   (:char) -> ();
	<pattern-buffer>: ()      -> (:string);

	<rep-one>:          () -> (:number, :number);
	!<rep-one-or-more>: () -> (:number, :number);
	<rep-zero-or-more>: () -> (:number, :number);
	<rep-zero-or-one>:  () -> (:number, :number);

	<set-repeat>:  (:ast_term, :number, :number) -> ();
	!<mul-repeat>: (:ast_term, :number)          -> ();

	<make-empty-term>:      ()         -> (:ast_term);
	<make-rule-term>: (:string)  -> (:ast_term);
	<make-literal-term>:    (:string)  -> (:ast_term);
	<make-group-term>:      (:ast_alt) -> (:ast_term);

	<make-alt>: (:ast_term) -> (:ast_alt);
	<make-rule>: (:string, :ast_alt) -> (:ast_rule);
	<make-empty-rule>: () -> (:ast_rule);

	<add-term-to-list>: (:ast_term, :ast_term) -> ();
	<add-alt-to-list>: (:ast_alt, :ast_alt) -> ();
	<add-rule-to-list>: (:ast_rule, :ast_rule) -> ();

	<err-syntax>;
	<err-expected-alt>;
	<err-expected-sep>;
	<err-expected-equals>;

	list-of-terms: () -> (:ast_term);
	list-of-alts: () -> (:ast_alt);

	body: () -> () = {
		{
			c = ESC;
		||
			c = CHAR;
		};
		<pattern-char>(c);
		body;
	||
		$;
	};

	term: () -> (t :ast_term) = {
		EMPTY;
		t = <make-empty-term>;
	||
		body;
		LITERAL;
		s = <pattern-buffer>;
		t = <make-literal-term>(s);
	||
		s = IDENT;
		t = <make-rule-term>(s);
	};

	factor: () -> (t :ast_term) = {
		t = term;

		(min, max) = <rep-one>;
		<set-repeat>(t, min, max);
	||
		STARTSTAR;
		a = list-of-alts;
		ENDSTAR;

		t = <make-group-term>(a);

		(min, max) = <rep-zero-or-more>;
		<set-repeat>(t, min, max);
	||
		STARTOPT;
		a = list-of-alts;
		ENDOPT;

		t = <make-group-term>(a);

		(min, max) = <rep-zero-or-one>;
		<set-repeat>(t, min, max);
	||
		STARTGROUP;
		a = list-of-alts;
		ENDGROUP;

		t = <make-group-term>(a);

		(min, max) = <rep-one>;
		<set-repeat>(t, min, max);
	};

	list-of-terms: () -> (l :ast_term) = {
		l = factor;
	||
		l = factor;
		t = list-of-terms;
		<add-term-to-list>(t, l);
	};

	list-of-alts: () -> (l :ast_alt) = {
		t = list-of-terms;
		l = <make-alt>(t);
	||
		t = list-of-terms;

		{
			ALT;
		##
			<err-expected-alt>;
		};

		a = list-of-alts;
		l = <make-alt>(t);
		<add-alt-to-list>(a, l);
	};

	rule: () -> (r :ast_rule) = {
		s = IDENT;

		{
			EQUALS;
		##
			<err-expected-equals>;
		};

		a = list-of-alts;
		r = <make-rule>(s, a);

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	list-of-rules: () -> (l :ast_rule) = {
		l = rule;
	||
		l = rule;
		r = list-of-rules();
		<add-rule-to-list>(r, l);
	};

	wsn: () -> (l :ast_rule) = {
		l = list-of-rules;
		EOF;
	##
		l = <make-empty-rule>;
		<err-syntax>;
	};

%entry%

	wsn;

