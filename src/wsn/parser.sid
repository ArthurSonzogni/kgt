/* $Id$ */

/*
 * Wirth Syntax Notation Parser
 */

%types%

	char;
	string;
	!number;

	ast_production;
	ast_term;
	ast_alt;

%terminals%

	!ERROR;
	!UNRECOGNISED;

	EQUALS;
	ALT;
	SEP;
	!EXCEPT;

	!STAR;
	!CAT;
	!OPT;

	STARTGROUP; ENDGROUP;
	STARTOPT;   ENDOPT;
	STARTSTAR;  ENDSTAR;

	EMPTY;
	!NAME;
	LITERAL;

	ESC:     () -> (:char);
	CHAR:    () -> (:char);
	IDENT:   () -> (:string);
	!NUMBER: () -> (:number);

%productions%

	<pattern-char>:   (:char) -> ();
	<pattern-buffer>: ()      -> (:string);

	<make-empty-term>: () -> (:ast_term);
	<make-literal-term>: (:string) -> (:ast_term);
	<make-production-term>: (:string) -> (:ast_term);
	<make-alt>: (:ast_term) -> (:ast_alt);
	<make-production>: (:string, :ast_alt) -> (:ast_production);
	<make-empty-production>: () -> (:ast_production);

	<make-star-group>: (:ast_alt) -> (:ast_term);
	<make-opt-group>: (:ast_alt) -> (:ast_term);
	<make-alt-group>: (:ast_alt) -> (:ast_term);

	!<set-repeat>: (:ast_term, :number) -> ();

	<add-term-to-list>: (:ast_term, :ast_term) -> ();
	<add-alt-to-list>: (:ast_alt, :ast_alt) -> ();
	<add-production-to-list>: (:ast_production, :ast_production) -> ();

	<err-syntax>;
	<err-expected-alt>;
	<err-expected-sep>;
	<err-expected-equals>;

	list-of-terms: () -> (:ast_term);
	list-of-alts: () -> (:ast_alt);

	body: () -> () = {
		{
			c = DOUBLEUP;
		||
			c = CHAR;
		};
		<pattern-char>(c);
		body;
	||
		$;
	};

	term: () -> (t :ast_term) = {
		EMPTY;
		t = <make-empty-term>;
	||
		body;
		LITERAL;
		s = <pattern-buffer>;
		t = <make-literal-term>(s);
	||
		s = IDENT;
		t = <make-production-term>(s);
	};

	factor: () -> (t :ast_term) = {
		t = term;
	||
		STARTSTAR;
		a = list-of-alts;
		ENDSTAR;

		t = <make-star-group>(a);
	||
		STARTOPT;
		a = list-of-alts;
		ENDOPT;

		t = <make-opt-group>(a);
	||
		STARTGROUP;
		a = list-of-alts;
		ENDGROUP;

		t = <make-alt-group>(a);
	};

	list-of-terms: () -> (l :ast_term) = {
		l = factor;
	||
		l = factor;
		t = list-of-terms;
		<add-term-to-list>(t, l);
	};

	list-of-alts: () -> (l :ast_alt) = {
		t = list-of-terms;
		l = <make-alt>(t);
	||
		t = list-of-terms;

		{
			ALT;
		##
			<err-expected-alt>;
		};

		a = list-of-alts;
		l = <make-alt>(t);
		<add-alt-to-list>(a, l);
	};

	production: () -> (p :ast_production) = {
		s = IDENT;

		{
			EQUALS;
		##
			<err-expected-equals>;
		};

		a = list-of-alts;
		p = <make-production>(s, a);

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	list-of-productions: () -> (l :ast_production) = {
		l = production;
	||
		l = production;
		p = list-of-productions();
		<add-production-to-list>(p, l);
	};

	wsn: () -> (l :ast_production) = {
		l = list-of-productions;
	##
		l = <make-empty-production>;
		<err-syntax>;
	};

%entry%

	wsn;

