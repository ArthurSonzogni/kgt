
/*
 * Automatically generated by lexi version 2.0
 * Copyright terms for the input source also apply to this generated code.
 */

#ifndef LEXI_GENERATED_HEADER_wsn__INCLUDED
#define LEXI_GENERATED_HEADER_wsn__INCLUDED

#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
#include <stdbool.h>
#endif



/*
 * This struct holds state for the lexer; its representation is
 * private, but present here for ease of allocation.
 */
struct wsn_state {
	int (*zone)(struct wsn_state *);

	/*
	 * Lexi's buffer is a simple stack.
	 */
	int buffer[1];
	int buffer_index;
};

/* Read a character */
int wsn_readchar(struct wsn_state *state);

/* Push a character to lexi's buffer */
void wsn_push(struct wsn_state *state, const int c);

/* Pop a character from lexi's buffer */
int wsn_pop(struct wsn_state *state);

/* Flush lexi's buffer */
void wsn_flush(struct wsn_state *state);

#ifndef LEXI_EOF
#define LEXI_EOF -1
#endif

enum wsn_groups {
	wsn_group_white = 0x1,
	wsn_group_character = 0x2,
	wsn_identifier_white = 0,
	wsn_literal_white = 0
};

/* true if the given character is present in the given group */
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ - 0L) >= 199901L
bool wsn_group(enum wsn_groups group, int c);
#else
int wsn_group(enum wsn_groups group, int c);
#endif

/* Identify a token */
int wsn_next(struct wsn_state *state);

/* Initialise a wsn_state structure */
void wsn_init(struct wsn_state *state);



#endif

